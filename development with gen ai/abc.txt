import React, { useState, useEffect } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { FaPlus, FaEdit, FaTrash, FaCheck, FaBell, FaShare, FaComment, FaMoon, FaSun, FaFilter, FaSort } from "react-icons/fa";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const TodoApp = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState({ title: "", description: "", dueDate: "", priority: "medium" });
  const [filter, setFilter] = useState("all");
  const [sortBy, setSortBy] = useState("dueDate");
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    const storedTasks = localStorage.getItem("tasks");
    if (storedTasks) {
      setTasks(JSON.parse(storedTasks));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("tasks", JSON.stringify(tasks));
  }, [tasks]);

  const addTask = () => {
    if (newTask.title.trim() !== "") {
      setTasks([...tasks, { ...newTask, id: Date.now(), completed: false }]);
      setNewTask({ title: "", description: "", dueDate: "", priority: "medium" });
      toast.success("Task added successfully!");
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id));
    toast.info("Task deleted");
  };

  const toggleComplete = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
    toast.success("Task status updated");
  };

  const editTask = (id, updatedTask) => {
    setTasks(tasks.map((task) => (task.id === id ? updatedTask : task)));
    toast.success("Task updated successfully!");
  };

  const onDragEnd = (result) => {
    if (!result.destination) return;
    const items = Array.from(tasks);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);
    setTasks(items);
  };

  const filteredTasks = tasks.filter((task) => {
    if (filter === "completed") return task.completed;
    if (filter === "pending") return !task.completed;
    return true;
  });

  const sortedTasks = filteredTasks.sort((a, b) => {
    if (sortBy === "dueDate") {
      return new Date(a.dueDate) - new Date(b.dueDate);
    }
    if (sortBy === "priority") {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    }
    return 0;
  });

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  return (
    <div className={`min-h-screen p-8 ${darkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-900"}`}>
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold mb-8 text-center">Feature-Rich Todo App</h1>
        <div className="flex justify-between items-center mb-6">
          <div className="flex space-x-4">
            <select
              className={`p-2 rounded ${darkMode ? "bg-gray-800" : "bg-white"}`}
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
            >
              <option value="all">All Tasks</option>
              <option value="completed">Completed</option>
              <option value="pending">Pending</option>
            </select>
            <select
              className={`p-2 rounded ${darkMode ? "bg-gray-800" : "bg-white"}`}
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="dueDate">Sort by Due Date</option>
              <option value="priority">Sort by Priority</option>
            </select>
          </div>
          <button
            className={`p-2 rounded-full ${darkMode ? "bg-yellow-400 text-gray-900" : "bg-gray-800 text-white"}`}
            onClick={toggleDarkMode}
          >
            {darkMode ? <FaSun /> : <FaMoon />}
          </button>
        </div>
        <div className={`mb-6 p-4 rounded-lg ${darkMode ? "bg-gray-800" : "bg-white shadow"}`}>
          <input
            type="text"
            placeholder="Task title"
            className={`w-full p-2 mb-2 rounded ${darkMode ? "bg-gray-700" : "bg-gray-100"}`}
            value={newTask.title}
            onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
          />
          <textarea
            placeholder="Task description"
            className={`w-full p-2 mb-2 rounded ${darkMode ? "bg-gray-700" : "bg-gray-100"}`}
            value={newTask.description}
            onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
          ></textarea>
          <div className="flex justify-between">
            <input
              type="date"
              className={`p-2 rounded ${darkMode ? "bg-gray-700" : "bg-gray-100"}`}
              value={newTask.dueDate}
              onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
            />
            <select
              className={`p-2 rounded ${darkMode ? "bg-gray-700" : "bg-gray-100"}`}
              value={newTask.priority}
              onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}
            >
              <option value="low">Low Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="high">High Priority</option>
            </select>
            <button
              className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-300"
              onClick={addTask}
            >
              <FaPlus />
            </button>
          </div>
        </div>
        <DragDropContext onDragEnd={onDragEnd}>
          <Droppable droppableId="tasks">
            {(provided) => (
              <ul {...provided.droppableProps} ref={provided.innerRef} className="space-y-4">
                {sortedTasks.map((task, index) => (
                  <Draggable key={task.id} draggableId={task.id.toString()} index={index}>
                    {(provided) => (
                      <li
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        className={`p-4 rounded-lg ${darkMode ? "bg-gray-800" : "bg-white shadow"} ${task.completed ? "opacity-50" : ""}`}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <h3 className={`text-xl font-semibold ${task.completed ? "line-through" : ""}`}>
                            {task.title}
                          </h3>
                          <div className="flex space-x-2">
                            <button
                              className="text-green-500 hover:text-green-600"
                              onClick={() => toggleComplete(task.id)}
                            >
                              <FaCheck />
                            </button>
                            <button
                              className="text-blue-500 hover:text-blue-600"
                              onClick={() => {
                                const updatedTask = prompt("Edit task", task.title);
                                if (updatedTask) editTask(task.id, { ...task, title: updatedTask });
                              }}
                            >
                              <FaEdit />
                            </button>
                            <button
                              className="text-red-500 hover:text-red-600"
                              onClick={() => deleteTask(task.id)}
                            >
                              <FaTrash />
                            </button>
                          </div>
                        </div>
                        <p className="mb-2">{task.description}</p>
                        <div className="flex justify-between text-sm">
                          <span className={`${getPriorityColor(task.priority)} px-2 py-1 rounded`}>
                            {task.priority} Priority
                          </span>
                          <span>{task.dueDate}</span>
                        </div>
                      </li>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </ul>
            )}
          </Droppable>
        </DragDropContext>
      </div>
      <ToastContainer position="bottom-right" autoClose={3000} />
    </div>
  );
};

const getPriorityColor = (priority) => {
  switch (priority) {
    case "high":
      return "bg-red-500 text-white";
    case "medium":
      return "bg-yellow-500 text-black";
    case "low":
      return "bg-green-500 text-white";
    default:
      return "bg-gray-500 text-white";
  }
};

export default TodoApp;
